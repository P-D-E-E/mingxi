generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  hashedPassword String?
  role           Role      @default(TRIAL)
  createdAt      DateTime  @default(now())
  nid            Int       @default(autoincrement())
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model Trial {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  company       String?
  wechatAccount String?
  ApplyReason   String?
  TrialStatus   TrialStatus @default(PENDING)
  createdAt     DateTime    @default(now())
}

model Event {
  id          String    @id @default(cuid())
  name        String?   @unique
  description String?
  article     String?
  image       String?
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      EventType @default(NONSELECTED)

  @@index([createdAt])
}

model Resource{
  id             String     @id @default(cuid())
  name           String     @unique
  description    String
  path           String
  uniquefilename String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  lastModifier   String?    // 存储最后修改者的名称
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  ADMIN
  PREMIUM
  TRIAL
}

enum TrialStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EventType {
  SELECTED
  NONSELECTED
}
